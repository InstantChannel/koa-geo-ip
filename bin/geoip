#!/usr/bin/env node

/**
 * GeoIP2 install script
 *   @arg --db specifies path to install to
 *   @arg --force ensures an install occurs
 *   @arg --update ensures an install occurs
 */

var fs = require( 'fs' );
var path = require( 'path' );
var zlib = require( 'zlib' );
var util = require( 'util' );

var mkdirp = require( 'mkdirp' );
var Progress = require( 'progress' );
var request = require( 'request' );
var argv = require( 'minimist' )( process.argv.slice( 2 ) );

var dbPath = process.env.npm_package_config_db || argv.db;
var installPath = 'http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz';

if ( !dbPath ) {
    console.error( 'Error: Specify db using --db' );
    process.exit( 1 );
}

try {
    util.log( 'Locating db' );
    fs.accessSync( dbPath );
} catch ( err ) {
    if ( err.code === 'ENOENT' ) {
        util.log( 'Database not found at ', dbPath );
        install();
        return;
    }

    util.log( 'Uncaught error finding db at', dbPath );
    process.exit( 1 );
}

util.log( 'Database found at', dbPath );

if ( argv.force || argv.update ) {
    util.log( 'Updating db' );
    install();
    return;
}

util.log( 'GeoIP data already available - skipping install' );
process.exit( 0 );

// Installs geoip db
function install() {
    util.log( 'Attempting to install geo db' );

    mkdirp.sync( path.dirname( dbPath ) );

    var req = request
        .get( installPath )
        .on( 'response', function( res ) {
            createProgress( res );
        })
        .on( 'error', function( err ) {
            console.error( 'Error streaming db', err );
        })
        .on( 'end', function () {
            util.log( 'Installation successful' );
        })
        .pipe( zlib.createGunzip() )
        .pipe( fs.createWriteStream( dbPath ) );
}

// Creates a progress bar for the download
function createProgress( res ) {
    var len = ~~res.headers[ 'content-length' ];
    var bar = new Progress( '  downloading [:bar] :percent :etas', {
        complete: '=',
        incomplete: '.',
        width: 30,
        total: len
    });

    res.on( 'data', function( chunk ){
        bar.tick( chunk.length );
    });

    res.on( 'end', function() {
        // console.log( '\n' );
    });
}
